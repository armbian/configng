#!/bin/bash


# Get the script directory
SCRIPT_DIR="$(dirname "$0")"

# Define the lib directory one level up from the script directory
LIB_DIR="$SCRIPT_DIR/../lib/armbian-configng"
DOC_DIR="$SCRIPT_DIR/../share/doc/armbian-config"
JSON_FILE="$LIB_DIR/config.ng.jobs.json"

# Load The Bash procedure Objects
JSON_DATA=$(<"$JSON_FILE")

markdown_objects_links() {
    local category="$1"
    local sub_category="$2"

	# Extract and print the IDs and descriptions of the sub-items in Markdown format
	links=$(echo "$JSON_DATA" | jq -r --arg category "$category" --arg sub_category "$sub_category" '
	    .menu[] | select(.id == $category) | .sub[] | select(.id == $sub_category) | .sub[]? | select(.sub | type == "array" and length > 0) |
	    "- [\(.description // "N/A")](#\(.id | ascii_downcase))"
')

    # Check if the output is empty and handle the error case
    if [ -z "$links" ]; then
        echo "Error: Specified category or sub-category not found."
        exit 1
    fi

    # Print the links
    echo "$links"
}

markdown_nested_objects() {
    local category="$1"
    local sub_category="$2"
    local sub_sub_category="$3"

    [[ ! -d $DOC_DIR ]] && mkdir -p $DOC_DIR

    # Extract and print the specified category and sub-category in Markdown format
    if [ -n "$sub_sub_category" ]; then
        output=$(echo "$JSON_DATA" | jq -r --arg category "$category" --arg sub_category "$sub_category" --arg sub_sub_category "$sub_sub_category" '
        .menu[] | select(.id == $category) | .sub[] | select(.id == $sub_category) | .sub[]? | select(.id == $sub_sub_category) | .sub[]? | select(.id != null) |
        "### \(.description // "N/A")\n\n" +
        "\(.prompt // "prompt N/A")\n\n" +
        "**Use:**\n ~~~\narmbian-config --cmd \(.id // "N/A")\n~~~\n\n" +
        "\n**Helper module:**\n\n" +
        (.command | join("\n```shell\n") | "```shell\n" + . + "\n```\n") +
        "**Condition:**\n~~~\n \(.condition // "N/A")\n~~~\n" +
        "**Status:** \(.status // "N/A")\n\n" +
        "**Source Reference:** \(.src_reference // "N/A")\n\n" +
        if (.author | startswith("@")) then
            "**Author:** [\(.author)](https://github.com/\(.author | ltrimstr("@")))\n\n***"
        else
            "**Author:** [\(.author)](https://github.com/\(.author))\n\n***"
        end

        ')


        #echo "$output" > "$DOC_DIR/${category,,}.${sub_category,,}.${sub_sub_category,,}.md"

    else
        output=$(echo "$JSON_DATA" | jq -r --arg category "$category" --arg sub_category "$sub_category" '
        .menu[] | select(.id == $category) | .sub[] | select(.id == $sub_category) | .sub[]? | select(.id != null) |
        "### \(.description // "N/A")\n\n" +
        "\(.prompt // "prompt N/A")\n\n" +
        "**Use:**\n ~~~\narmbian-config --cmd \(.id // "N/A")\n~~~\n\n" +
        "\n**Helper module:**\n\n" +
        (.command | join("\n") | "```shell\n" + . + "\n```\n") +
        "**Condition:**\n~~~\n \(.condition // "N/A")\n~~~\n" +
        "**Status:** \(.status // "N/A")\n\n" +
        "**Source Reference:** \(.src_reference // "N/A")\n\n" +
        if (.author | startswith("@")) then
            "**Author:** [\(.author)](https://github.com/\(.author | ltrimstr("@")))\n\n***"
        else
            "**Author:** [\(.author)](https://github.com/\(.author))\n\n***"
        end
        ')


        #echo "$output" > "$DOC_DIR/${category,,}.${sub_category,,}.md"
    fi

    # Check if the output is empty and handle the error case
    if [ -z "$output" ]; then
        echo "Error: Specified category or sub-category not found."
        exit 1
    fi


    # Print the output
    echo "$output"
    #echo "done"
}


markdown_userspace_objects() {
    local category="$1"
    local sub_category="$2"
    local sub_sub_category="$3"

    # Extract and print the specified category and sub-category in Markdown format
    if [ -n "$sub_sub_category" ]; then
        output=$(echo "$JSON_DATA" | jq -r --arg category "$category" --arg sub_category "$sub_category" --arg sub_sub_category "$sub_sub_category" '
        .menu[] | select(.id == $category) | .sub[] | select(.id == $sub_category) | .sub[]? | select(.id == $sub_sub_category) | .sub[]? | select(.id != null) |
        "### \(.description // "N/A")\n\n" +
        "\(.prompt // "prompt N/A")\n\n" +
        "**Use:**\n ~~~\narmbian-config --cmd \(.id // "N/A")\n~~~\n\n" +
        "**Status:** \(.status // "N/A")\n\n" +
        "**Source Reference:** \(.src_reference // "N/A")\n\n" +
        if (.author | startswith("@")) then
            "**Author:** [\(.author)](https://github.com/\(.author | ltrimstr("@")))\n\n***"
        else
            "**Author:** [\(.author)](https://github.com/\(.author))\n\n***"
        end

        ')


        #echo "$output" > "$DOC_DIR/${category,,}.${sub_category,,}.${sub_sub_category,,}.md"

    else
        output=$(echo "$JSON_DATA" | jq -r --arg category "$category" --arg sub_category "$sub_category" '
        .menu[] | select(.id == $category) | .sub[] | select(.id == $sub_category) | .sub[]? | select(.id != null) |
        "### \(.description // "N/A")\n\n" +
        "\(.prompt // "prompt N/A")\n\n" +
        "**Use:**\n ~~~\narmbian-config --cmd \(.id // "N/A")\n~~~\n\n" +
        "**Status:** \(.status // "N/A")\n\n" +
        "**Source Reference:** \(.src_reference // "N/A")\n\n" +
        if (.author | startswith("@")) then
            "**Author:** [\(.author)](https://github.com/\(.author | ltrimstr("@")))\n\n***"
        else
            "**Author:** \(.author)***"
        end
        ')


        #echo "$output" > "$DOC_DIR/${category,,}.${sub_category,,}.md"
    fi

    # Check if the output is empty and handle the error case
    if [ -z "$output" ]; then
        echo "Error: Specified category or sub-category not found."
        exit 1
    fi


    # Print the output
    echo "$output"
    #echo "done"
}


# Call the function with the provided arguments
markdown_desktops() {

        [[ ! -d $DOC_DIR ]] && mkdir -p $DOC_DIR
    {
        echo "# Desktop environments"
        echo ""
        echo "## Overview"
        markdown_objects_links "Software" "Desktops"
        echo "***"

        echo "## XFCE"
        markdown_userspace_objects "Software" "Desktops" "XFCE"
        echo "***"

        echo "Gnome"
        markdown_userspace_objects "Software" "Desktops" "Gnome"

        echo "***"

        echo "## Cinnamon"
        markdown_userspace_objects "Software" "Desktops" "Cinnamon"
        echo "***"


    } > "$DOC_DIR/armbian.desktops.md"
}

markdown_desktops
echo "done"
exit 0
