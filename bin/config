#!/bin/bash

# Copyright (c) Authors: http://www.armbian.com/authors, info@armbian.com
#
# This file is licensed under the terms of the GNU General Public
# License version 2. This program is licensed "as is" without any
# warranty of any kind, whether express or implied.

directory="$(dirname "${BASH_SOURCE[0]}")" ;
filename="$(basename "${BASH_SOURCE[0]}")" ;
libpath="$directory/../lib"

if [[ -d "$directory/../lib" ]]; then
    libpath="$directory"/../lib
else
    echo "Libraries not found"
    exit 0
fi

# shellcheck source=/dev/null
for file in "$libpath"/config/*; do
    source "$file"
done

# Source the files relative to the script location
# Uncomment to include bash-utility
#for file in "$libpath"/bash-utility/*; do
#    source "$file"
#done

functionarray=()
funnamearray=()
catagoryarray=()
descriptionarray=()

for file in "$libpath"/${filename}/*.sh; do

    mapfile -t temp_functionarray < <(grep -oP '^\w+::\w+' "$file")
    functionarray+=("${temp_functionarray[@]}")

    mapfile -t temp_funnamearray < <(grep -oP '^\w+::\w+' "$file" | sed 's/.*:://')
    funnamearray+=("${temp_funnamearray[@]}")

    mapfile -t temp_catagoryarray < <(grep -oP '^\w+::\w+' "$file" | sed 's/::.*//')
    catagoryarray+=("${temp_catagoryarray[@]}")

    mapfile -t temp_descriptionarray < <(grep -oP '^# @description.*' "$file" | sed 's/^# @description //')
    descriptionarray+=("${temp_descriptionarray[@]}")

    mapfile -t temp_optionarray < <(grep -oP '^# @options.*' "$file" | sed 's/^# @options //')
    optionarray+=("${temp_optionarray[@]}")

done


# @description See help message
see_help(){

    # Extract unique prefixes
    declare -A prefixes
    for i in "${!functionarray[@]}"; do
        prefix="${functionarray[i]%%::*}"
        prefixes["$prefix"]=1
    done

    # Construct usage line
    usage=""
    for prefix in "${!prefixes[@]}"; do
        usage+=" | $prefix [ options ] "
    done

    echo -e "Usage: ${filename%.*} [options]"
    echo -e "  Options:"
    echo -e "    -h,    Print this help."
    echo
    echo -e "    -l,    List available function groups."
    echo
    echo -e "    -r,    Run a function group."
	echo
	echo -e "    -m,    View the Manual page."

    }

# @description See help message
see_function(){

    echo ""
    echo "Usage: ${filename%.*} [ -r  [group] [option] ]"
    echo ""
    # Group options by prefix
    declare -A groups
    for i in "${!functionarray[@]}"; do
        prefix="${functionarray[i]%%::*}"
        suffix="${functionarray[i]#*::}"
        groups["$prefix"]+=$'\t'"$suffix"$'\t'"${descriptionarray[i]}"$'\n'
    done

    # Print grouped options
    for group in "${!groups[@]}"; do
        echo -e "$group [options]"
        echo -e "${groups[$group]}"
    done
    }

# Function to generate a Markdown man page
see_manual() {
	echo "---"
	echo "title: CONFIG"
	echo "section: 1"
	echo "header: User Manual"
	echo "footer: config 1.0.0"
	echo "date: September 04, 2023"
	echo "version: 1.0.0"
	echo "---"
    echo "# NAME"
    echo "config - Configuration management script"
    echo
    echo "# SYNOPSIS"
    echo "config [OPTIONS] [GROUP] [OPTION]"
    echo
    echo "# DESCRIPTION"
    echo "This script is a configuration management tool."
    echo "It provides various functions grouped by categories to manage configurations."
    echo
    echo "# OPTIONS"
	see_help
    echo
    echo "# LIBRARIES"

    # Group options by prefix
    declare -A groups
    for i in "${!functionarray[@]}"; do
        prefix="${functionarray[i]%%::*}"
        suffix="${functionarray[i]#*::}"
        groups["$prefix"]+=$'\n\n'"**$suffix**"$'\n\n'"$(echo "${descriptionarray[i]}" | sed 's/^/    /')"$'\n'
    done

    # Print grouped options
    for group in "${!groups[@]}"; do
        echo "## $group"
        echo -e "${groups[$group]}"
    done
}



# Check command-line options
check_opts() {
  if [ "$1" == "-r" ] || [ "$1" == "--run" ] ; then
    shift  # Shifts the arguments to the left, excluding the first argument ("-r")
    full_function_name="$1::$2"  # Combines the first and second arguments as the full function name (group::name)
    shift 2  # Shifts the arguments again to exclude the full function name

    found=false

    for ((i=0; i<${#functionarray[@]}; i++)); do
      if [ "$full_function_name" == "${functionarray[i]}" ]; then
        found=true
        # Call the corresponding function using variable indirection
        "${functionarray[i]}" "$@"
        break
      fi
    done

    elif [ "$1" == "-h" ]; then
        see_help
    elif [ "$1" == "-l" ] || [ "$found" == false ]; then
        see_function
    elif [ "$1" == "-m" ]; then
        see_manual > "${directory}/../docs/${filename}.md" ; 
        [[ -f "/usr/bin/pandoc" ]] && see_manual | pandoc -s -f gfm -t man -o "${directory}/../docs/${filename}.1"          
        [[ -f "/usr/bin/pandoc" ]] && see_manual | pandoc -s -f gfm -t man | man -l -
        [[ ! -f "/usr/bin/pandoc" && -f "${directory}/../docs/${filename}.1" ]] && man "${directory}/../docs/${filename}.1"
    elif [ "$1" == "-w" ]; then
		# todo fallback to ask if server to  insall simple server or others
        see_manual | pandoc -s -f gfm -t html -o "${directory}/../docs/${filename}.html" ;
        sed -i 's/color: #1a1a1a;/color: #fdfdfd;/g; s/background-color: #fdfdfd;/background-color: #1a1a1a;/g' "${directory}/../docs/${filename}.html"
    else
        echo
        echo -e "\e[5mFuture TUI home for ${filename}\e[0m"
        echo
        echo "Until then, here is the help message:"
        echo
        see_help
    
    fi
}

check_opts "$@"
