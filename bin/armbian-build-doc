#!/bin/bash
#
# SPDX-License-Identifier: GPL-2.0
#
#
# This file is a part of the Armbian Build Framework
# https://github.com/armbian/build/

directory="$(dirname "${BASH_SOURCE[0]}")"
cd "$directory" || exit
filename="$(basename "${BASH_SOURCE[0]}")" ;
libpath="$(dirname "$(dirname "$(realpath "$0")")")/lib"
share_path="$(dirname "$(dirname "$(realpath "$0")")")/share"

# Source the external file build commands
script_path="$(dirname "$(dirname "$(realpath "$0")")")/share/armbian-build/commands.sh"

# Use awk to extract the array definition
ARMBIAN_COMMANDS_TO_HANDLERS_DICT=$(awk '/declare -g -A ARMBIAN_COMMANDS_TO_HANDLERS_DICT=/,/^(\}|[[:space:]]*\))/ {print}' "$script_path")

# Execute the array definition
eval "$ARMBIAN_COMMANDS_TO_HANDLERS_DICT"

# Add a long discrption to each command
# EN ARMBIAN_COMMANDS_TO_HANDLERS_DICT Long descritions help messages readme & manpage
declare -A COMMAND_DESCRIPTIONS_EN=(
    ["docker"]="Manage Docker containers"
    ["requirements"]="Install system requirements"
    ["config_dump_json"]="Dump configuration to JSON"
    ["json_info"]="Display JSON information"
    ["patch_kernel"]="Apply kernel patches"
    ["standard_build"]="Perform standard build"
    ["distccd"]="Set up distccd"
    ["flash"]="Flash firmware"
    ["requirements"]="Install system requirements"
    ["config_dump_json"]="Dump configuration to JSON"
    ["json_info"]="Display JSON information"
    ["patch_kernel"]="Apply kernel patches"
    ["standard_build"]="Perform standard build"
    ["distccd"]="Set up distccd"
    ["flash"]="Flash firmware"
)

# Generate JSON output from the new bash array set 
generate_json() {
    local i=1
    local command
    local description
    mapfile -t commands < <(printf '%s\n' "${!ARMBIAN_COMMANDS_TO_HANDLERS_DICT[@]}")

    # Start JSON array
    json_output="["

    for command in "${commands[@]}"; do
        description="${COMMAND_DESCRIPTIONS_EN[${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$command]}]}"
        handler="${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$command]}"

        if [[ $i -gt 1 ]]; then
            json_output+=", "
        fi

        # Append JSON object to the array
        json_output+=$(printf '{"command": "%s", "description": "%s", "handler": "%s"}' "$command" "$description" "$handler")

        ((i++))
    done

    # End JSON array
    json_output+="]"

    # Print the formatted JSON
    echo "$json_output" | jq > "$share_path"/armbian-build/build-commands.json ;
    echo "JSON output generated at $share_path"/armbian-build/build-commands.json ;
}

# Generate CSV output from the new bash array set
generate_csv() {
    local i=1
    local command
    local description
    mapfile -t commands < <(printf '%s\n' "${!ARMBIAN_COMMANDS_TO_HANDLERS_DICT[@]}")

    # Start CSV content
    csv_output="command,description,handler"

    for command in "${commands[@]}"; do
        description="${COMMAND_DESCRIPTIONS_EN[${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$command]}]}"
        handler="${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$command]}"

        # Append CSV row to the content
        csv_output+="\n$command,$description,$handler"

        ((i++))
    done

    # Print the formatted CSV
    echo "$csv_output" > "$share_path"/armbian-build/build-commands.csv ;
    echo "CSV output generated at $share_path"/armbian-build/build-commands.csv ;
}

# Generate A Table HTML output from the new bash array set
generate_html() {
    local i=1
    local command
    local description
    mapfile -t commands < <(printf '%s\n' "${!ARMBIAN_COMMANDS_TO_HANDLERS_DICT[@]}")

    # Start HTML content
    html_output="<html><body><h1>Armbian Build Framework Commands</h1><ul>"
    html_output+='<head>
        <style>
            body {
                background-color: #333;
                color: #fff;
                font-family: Arial, sans-serif;
            }
            table {
                border-collapse: collapse;
                width: 100%;
            }
            th, td {
                text-align: left;
                padding: 8px;
            }
            th {
                background-color: #4CAF50;
                color: white;
            }
            tr:nth-child(even) {color: black; background-color: #f2f2f2; }
        </style>
    </head>'
    html_output+="<table><tr><th>Command</th><th>Description</th><th>Handler</th></tr>"
    for command in "${commands[@]}"; do
        description="${COMMAND_DESCRIPTIONS_EN[${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$command]}]}"
        handler="${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$command]}"

        # Append HTML tablle item to the content
        html_output+="<tr><td>$command</td><td>$description</td><td>$handler</td></tr>"

        ((i++))

    done

    # End HTML content
    html_output+="</table></body></html>"

    # Print the formatted HTML

    echo "$html_output" > "$share_path"/armbian-build/build-commands.html ; 
    
    echo "HTML output generated at $share_path/armbian-build/build-commands.html"
}

# Generate Markdown output from the new bash array set
generate_markdown() {
    local i=1
    local command
    local description
    mapfile -t commands < <(printf '%s\n' "${!ARMBIAN_COMMANDS_TO_HANDLERS_DICT[@]}")

    # Start Markdown content
    markdown_output="# Armbian Build Framework Commands\n"

    for command in "${commands[@]}"; do
        description="${COMMAND_DESCRIPTIONS_EN[${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$command]}]}"
        handler="${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$command]}"

        # Append Markdown list item to the content
        markdown_output+="\n## $command\n- **Description:** $description\n- **Handler:** $handler\n"

        ((i++))
    done

    # Print the formatted Markdown
    echo -e "$markdown_output" > "$share_path"/armbian-build/readme.md ;
    echo "Markdown output generated at $share_path/armbian-build/readme.md" ;
}

# Help message -h
generate_help_message() {
    echo "Usage: $0 [options]"
    echo "Options:"
    echo "  -h  This help message "
    echo "  -a  Generate all file "
    echo "  -c  Generate CSV file "   
    echo "  -j  Generate JSON file "
    echo "  -m  Generate Markdown file "
    echo "  -w  Generate HTML file "
}

# Generate a TUI menu from short flag option -h 
# Usage "$filename" no flag options shows a tui menu
# usage $filename -h shows a help message in the termanal
main_menu(){
	# Define the script
	script="./$filename"

	# Run the script with the -h option and save the output to a variable
	help_message=$("$script" -h ) || exit 2

	# Reformat the help message into an array line by line
	readarray -t script_launcher < <(echo "$help_message" | sed 's/-\([a-zA-Z]\)/\1/' | grep '^  [a-zA-Z] ' | grep -v '\[')

	# Loop through each line in the array and create a menu string
	menu_string=""
	for line in "${script_launcher[@]}"; do
	  # Append the formatted line to the menu string
	  menu_string+="$line\n"
	done

	# Use the get_help_msg function and pipe its output into configng-interface -m
	selected_option=$(echo -e "$menu_string" | armbian-interface -m  )
 
	# Check if the user made a choice and run the script with the selected option $filename -h || -m || -o etc 
	[[ -n "$selected_option" && "$selected_option" != "You cancelled." ]] &&  "$script" -"$selected_option" | armbian-interface -o || return 1

    # Return to the main menu
    return 0 ;
}

# TUI OK message
# 
show_message(){

    # Read the input from the pipe continuously until there is no more input
    input=""
    while read -r line; do
        input+="$line\n"
    done

    echo "$input" | armbian-interface -o
}

call_all() {
    generate_html
    generate_json
    generate_markdown
    generate_csv  
}

# Short flag options "-*"
while getopts "abchjmntw" opt; do
    case "$opt" in
    a)  call_all ; exit 0 ;;
    c)  generate_csv ; exit 0 ;;
	h)  generate_help_message ; exit 0 ;;
	w)  generate_html ; exit 0 ;;
	j)  generate_json ; exit 0 ;;
	m)  generate_markdown ; exit 0 ;;
	*) echo "Invalid option"; generate_help_message ; exit 1 ;;
    esac
done

# Precursor to the long flag options "--*" 
if [[ $1 == *"--"* ]]; then
     echo "Error: Invalid option detected"
     exit 1
# Pass no flag "*=*" options to the compile script
elif [[ -n $1 ]] && ! [[ $1 == --* || $1 == -* ]]; then
     bash ./compile.sh "$@"
# If no options are passed, display the a menu of options
elif [[ -z $1 ]]; then
     echo "
     No options passed: 
        Launching TUI menu from the short flag options -h     
    " | armbian-interface -o ;
     main_menu  ; exit 0 ;
fi
