#!/bin/bash

[[ -t 1 ]] && tput init
#
# Language-based variable assignment for script directory path
# This serves as a Rosetta Stone for developers,
# allowing them to use the variable name they are most comfortable with.

# allows CTRL c to exit
trap "exit" INT TERM
[[ $EUID != 0 ]] && exec sudo "$0" "$@"
#
# Get the script directory
script_dir="$(dirname "$0")"

[[ -d "$script_dir/../tools" ]] && tools_dir="$script_dir/../tools"
[[ ! -d "$script_dir/../lib" && -n "$tools_dir" ]] && echo -e "Please run\nbash "$tools_dir/config-assemble.sh" to build the lib directory\n" && exit 1

# 'whiptail' is a simple dialog box utility that works well with Bash. It doesn't have all the features of some other dialog box utilities, but it does everything we need for this script.
[[ -x "$(command -v whiptail)" ]] && DIALOG="whiptail"

# Define the lib directory one level up from the script directory
lib_dir="$script_dir/../lib/armbian-config"
doc_dir="$script_dir/../share/doc/armbian-config"
json_file="$lib_dir/config.jobs.json"

#
# Load The Bash procedure Objects
json_data=$(<"$json_file")

#
# Prepare the module options array
declare -A module_options

#
# Load configng core functions and module options array

source "$lib_dir/config.functions.sh"
# TODO move to runtime file
set_runtime_variables
#check_distro_status
#echo "Loaded Runtime variables..." #| show_infobox ;
# TODO
[[ -t 1 ]] && echo "Loaded Dialog..." #| show_infobox ;
source "$lib_dir/config.docs.sh"
#echo "Loaded Docs..." #| show_infobox ;
source "$lib_dir/config.system.sh"
#echo "Loaded System helpers..." #| show_infobox ;
source "$lib_dir/config.network.sh"
#echo "Loaded Network helpers..." #| show_infobox ;
source "$lib_dir/config.software.sh"
#echo "Loaded Software helpers..." #| show_infobox ;
#
# Loads the variables from beta armbian-config for runtime handling


case "$1" in
"--help")
	if [[ -n "$2" ]]; then
		see_cmd_list "$2"
		echo ""
		exit 0
	fi

	echo "Usage:  armbian-config --[option]
     Options:
     --help [category]   Use [category] to filter specific menu options.
     --cmd  [option]     Run a command from the menu (simple)
     --api  [option]     Run a helper command        (advanced)
     --doc               Generate the README.md file

     Examples:
     armbian-config --help [cmd||System||Software||Network||Localisation]
     armbian-config --cmd help
     armbian-config --api help
"
	exit 0
	;;
"--doc")
    # TODO: move --doc to --api
	generate_readme
	exit 0
	;;
"--cmd")
    	# TODO move source for related groups
	# to respective case switch
	# Interface group not sepeated and mixed in functions and docs etc..
	# TODO Sort and group interface for source file
	INPUTMODE="cmd"
	shift
	if [[ -z "$1" || "$1" == "help" ]]; then
		see_cmd_list
		exit 0
	fi

	args="$@"
	execute_command "$args"
	exit 0
	;;
"--api")
    	# move source for related groups
	# to respective case switch
    	# source "$lib_dir/config.docs.sh"
	# TODO remove interface spacifice function from docs into there own group files.
	shift
	option="$1"
	[[ "$option" == "json" ]] && generate_json_options && exit 0 ;
	[[ "$option" == "docs" ]] && generate_readme && exit 0 ;
	if [[ -z "$option" || "$option" == "help" ]] ; then
		echo "Options:"
		echo "	json - database in json format"
		echo "	docs - generate DOCUMEMT.md"
		echo ""
		exit 0 ;
	fi
	shift
	args="$@"
	# echo -e "\"$option\" \"$args\""
	"$option" "$args"
	exit 0
	;;
"--noint")
	shift
	option="$1"
	[[ "$option" == "help" ]] && see_use ; exit 0 ;
	shift
	args="$@"
	"$option" "$args" <&-
	exit 0
	;;
"main=help" | "main=Help")
	see_cli_legacy
	echo ""
	exit 0
	;;
"main="*)
	declare -A main_map
	main_map=(
		# map name to menu category
		["System"]="S"
		["Software"]="I"
		["Network"]="N"
		["Localisation"]="L"
	)
	main_value="${1#main=}"
	main_value="${main_map[$main_value]}"

	if [ -z "$main_value" ]; then
		echo "Error: Invalid List $1"
		exit 1
	fi
	declare -A select_map
	# map name to menu number
	select_map=(
		["Headers"]="04"
		["Headers_install"]="04"
		["Headers_remove"]="05"
		["Firmware"]="06"
		["Nightly"]="07"
	)
	select_value="${2#selection=}"
	select_value="${select_map[$select_value]}"
	if [ -z "$select_value" ]; then
		echo "Error: Invalid Option $2"
		exit 1
	fi
	echo "$main_value""$select_value"
	execute_command "$main_value""$select_value"
	exit 0
	;;
*)
	if [[ $EUID != 0 ]]; then
		echo -e "error: Exiting \nTry: 'sudo armbian-config'\n or: 'armbian-config --help' for More info\n\n"
		exit 0
	fi
	;;
esac

clear
echo "Almost there ..." #| show_infobox ;
echo "Checking Runtime conditions..." #| show_infobox ;
source "$lib_dir/config.runtime.sh"
echo "Loaded Runtime conditions..." #| show_infobox ;

#
# Generate the top menu with the modified Object data
set_colors 4
generate_top_menu "$json_data"

#
# Exit the script with a success status code

#
# Show about this tool on exit
about_armbian_configng

exit 0
