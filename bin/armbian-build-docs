#!/bin/bash
#
# SPDX-License-Identifier: GPL-2.0
#
#
# This file is a part of the Armbian Build Framework
# https://github.com/armbian/build/


directory="$(dirname "${BASH_SOURCE[0]}")"
cd "$directory" || exit
filename="$(basename "${BASH_SOURCE[0]}")" ;
libpath="$(dirname "$(dirname "$(realpath "$0")")")/lib"
share_path="$(dirname "$(dirname "$(realpath "$0")")")/share"

# Set the tui
if command -v whiptail > /dev/null; then
   DIALOG=whiptail
elif command -v dialog > /dev/null; then
   DIALOG=dialog
else
    echo "Error: Neither whiptail nor dialog is installed."
    exit 1
fi

# Source the external file                              lib/armbian-build/commands.sh
script_path="$(dirname "$(dirname "$(realpath "$0")")")/lib/armbian-build/commands.sh"

# Use awk to extract the array
ARMBIAN_COMMANDS_TO_HANDLERS_DICT=$(awk '/declare -g -A ARMBIAN_COMMANDS_TO_HANDLERS_DICT=/,/^(\}|[[:space:]]*\))/ {print}' "$script_path")

# Execute the array definition
eval "$ARMBIAN_COMMANDS_TO_HANDLERS_DICT"

# EN ARMBIAN_COMMANDS_TO_HANDLERS_DICT Descritions Groups
declare -A COMMAND_DESCRIPTIONS_EN=(
    ["docker"]="Manage Docker containers"
    ["requirements"]="Install system requirements"
    ["config_dump_json"]="Dump configuration to JSON"
    ["json_info"]="Display JSON information"
    ["patch_kernel"]="Apply kernel patches"
    ["standard_build"]="Perform standard build"
    ["distccd"]="Set up distccd"
    ["flash"]="Flash firmware"
    ["requirements"]="Install system requirements"
    ["config_dump_json"]="Dump configuration to JSON"
    ["json_info"]="Display JSON information"
    ["patch_kernel"]="Apply kernel patches"
    ["standard_build"]="Perform standard build"
    ["distccd"]="Set up distccd"
    ["flash"]="Flash firmware"
)

generate_json() {
    local i=1
    local command
    local description
    mapfile -t commands < <(printf '%s\n' "${!ARMBIAN_COMMANDS_TO_HANDLERS_DICT[@]}")

    # Start JSON array
    json_output="["

    for command in "${commands[@]}"; do
        description="${COMMAND_DESCRIPTIONS_EN[${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$command]}]}"
        handler="${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$command]}"

        if [[ $i -gt 1 ]]; then
            json_output+=", "
        fi

        # Append JSON object to the array
        json_output+=$(printf '{"command": "%s", "description": "%s", "handler": "%s"}' "$command" "$description" "$handler")

        ((i++))
    done

    # End JSON array
    json_output+="]"

    # Print the formatted JSON
    echo "$json_output" | jq > "$share_path"/armbian-build/build-commands.json ;
    echo "JSON output generated at $share_path"/armbian-build/build-commands.json ;
}

generate_csv() {
    local i=1
    local command
    local description
    mapfile -t commands < <(printf '%s\n' "${!ARMBIAN_COMMANDS_TO_HANDLERS_DICT[@]}")

    # Start CSV content
    csv_output="command,description,handler"

    for command in "${commands[@]}"; do
        description="${COMMAND_DESCRIPTIONS_EN[${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$command]}]}"
        handler="${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$command]}"

        # Append CSV row to the content
        csv_output+="\n$command,$description,$handler"

        ((i++))
    done

    # Print the formatted CSV
    echo "$csv_output" > "$share_path"/armbian-build/build-commands.csv ;
    echo "CSV output generated at $share_path"/armbian-build/build-commands.csv ;
}

# html output
generate_html() {
    local i=1
    local command
    local description
    mapfile -t commands < <(printf '%s\n' "${!ARMBIAN_COMMANDS_TO_HANDLERS_DICT[@]}")

    # Start HTML content
    html_output="<html><body><h1>Armbian Build Framework Commands</h1><ul>"

    for command in "${commands[@]}"; do
        description="${COMMAND_DESCRIPTIONS_EN[${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$command]}]}"
        handler="${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$command]}"

        # Append HTML list item to the content
        html_output+="<li><strong>$command</strong>: $description (Handler: $handler)</li>"

        ((i++))
    done

    # End HTML content
    html_output+="</ul></body></html>"

    # Print the formatted HTML

    echo "$html_output" > "$share_path"/armbian-build/build-commands.html ; 
    
    echo "HTML output generated at $share_path/armbian-build/build-commands.html"
}

main_menu(){
	# Define the script
	script="./armbian-build-docs"


	# Run the script with the -h option and save the output to a variable
	help_message=$("$script" -h ) || exit 2

	# Reformat the help message into an array line by line
	readarray -t script_launcher < <(echo "$help_message" | sed 's/-\([a-zA-Z]\)/\1/' | grep '^  [a-zA-Z] ' | grep -v '\[')

	# Loop through each line in the array and create a menu string
	menu_string=""
	for line in "${script_launcher[@]}"; do
	  # Append the formatted line to the menu string
	  menu_string+="$line\n"
	done

	# Use the get_help_msg function and pipe its output into configng-interface -m
	selected_option=$(echo -e "$menu_string" | ./armbian-interface -m  )

	# Run the armbian-monitor script with the selected option
	[[ -n "$selected_option" ]] && "$script" -"$selected_option"  | ./armbian-interface -o ;

	}

# TUI Menu
generate_tui() {

    local i=0
    local command
    local description
# Get terminal size
lines=$(stty size | cut -d' ' -f1)
columns=$(stty size | cut -d' ' -f2)

# Adjust border size
border_height=$((lines - 6 ))
border_width=$((columns - 6 ))

	if command -v whiptail > /dev/null; then
	   local DIALOG=whiptail
	elif command -v dialog > /dev/null; then
	   local DIALOG=dialog
	else
	    echo "Error: Neither whiptail nor dialog is installed."
	    exit 1
	fi

	for command in "${!ARMBIAN_COMMANDS_TO_HANDLERS_DICT[@]}"; do
        description="${COMMAND_DESCRIPTIONS_EN[${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$command]}]}"
        handler="${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$command]}"
        options+=("$i" "$command - $description")
		results+=("[$command]=\"$handler\"")
        ((i++))
    done 

	choice=$($DIALOG --title "Config Options" --menu "Choose an option:" "$border_height" "$border_width" 0 "${options[@]}" 3>&1 1>&2 2>&3)
	echo -e "Choice $choice Result:\n\t ${results[$choice]}" | show_message

	}

# TUI OK message
show_message(){

    # Read the input from the pipe continuously until there is no more input
    input=""
    while read -r line; do
        input+="$line\n"
    done

    echo "$input" 

    }


generate_markdown() {
    local i=1
    local command
    local description
    mapfile -t commands < <(printf '%s\n' "${!ARMBIAN_COMMANDS_TO_HANDLERS_DICT[@]}")

    # Start Markdown content
    markdown_output="# Armbian Build Framework Commands\n"

    for command in "${commands[@]}"; do
        description="${COMMAND_DESCRIPTIONS_EN[${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$command]}]}"
        handler="${ARMBIAN_COMMANDS_TO_HANDLERS_DICT[$command]}"

        # Append Markdown list item to the content
        markdown_output+="\n## $command\n- **Description:** $description\n- **Handler:** $handler\n"

        ((i++))
    done

    # Print the formatted Markdown
    echo -e "$markdown_output" > "$share_path"/armbian-build/readme.md ;
    echo "Markdown output generated at $share_path/armbian-build/readme.md" ;
}

# Help message -h
generate_help_message() {
    echo "Usage: $0 [options]"
    echo "Options:"
    echo "  -a  Generate all file "
    echo "  -b  Generate bash completion file "
    echo "  -c  Generate CSV file "
    echo "  -h  Generate help message "
    echo "  -j  Generate JSON file "
    echo "  -m  Generate Markdown file "
    echo "  -w  Generate HTML file "
}

call_all() {
    generate_html
    generate_json
    generate_markdown
    generate_csv  
}
# Call the function

while getopts "abchjmntw" opt; do
    case "$opt" in
    a)  call_all ; exit 0 ;;
	b)  generate_bash ; exit 0 ;;
    c)  generate_csv ; exit 0 ;;
	h)  generate_help_message ; exit 0 ;;
	w)  generate_html ; exit 0 ;;
	j)  generate_json ; exit 0 ;;
	m)  generate_markdown ; exit 0 ;;
	t)  generate_tui ; exit 0 ;;
	*) echo "Invalid option"; generate_help_message ; exit 1 ;;
    esac
done

if [[ $1 == *"--"* ]]; then
     echo "Error: Invalid option detected"
     exit 1
elif [[ -n $1 ]] && ! [[ $1 == --* || $1 == -* ]]; then
     bash ./compile.sh "$@"
elif [[ -z $1 ]]; then
     main_menu  ; exit 0 ;
fi
